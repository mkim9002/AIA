import numpy as np
import pandas as pd
from tensorflow.python.keras.models import Sequential, Model, load_model
from tensorflow.python.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, SimpleRNN, Input, concatenate, Add
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from tensorflow.python.keras.callbacks import EarlyStopping


# 1. data
# 1.1 경로 가져오기
path = './_data/시험/'
path_save = './_save/samsung/'

datasets_samsung = pd.read_csv(path + '삼성전자 주가2.csv', index_col=0, encoding='cp949')
datasets_hyundai = pd.read_csv(path + '현대자동차.csv', index_col=0, encoding='cp949')

print(datasets_samsung.shape) #(3260, 16)
print(datasets_hyundai.shape) #(3140, 16)

# '전일비', '종가' 열을 제외한 모든 열을 가져옵니다.
samsung_x = datasets_samsung.drop(['전일비', '종가'], axis=1)
samsung_y = datasets_samsung['종가']
hyundai_x = datasets_hyundai.drop(['전일비', '종가'], axis=1)
hyundai_y = datasets_hyundai['종가']

samsung_x = samsung_x.iloc[:1200, :]
samsung_y = samsung_y.iloc[:1200]
hyundai_x = hyundai_x.iloc[:1200, :]
hyundai_y = hyundai_y.iloc[:1200]

# 전처리 - scaling
scaler1 = MinMaxScaler()
samsung_x = scaler1.fit_transform(samsung_x)
hyundai_x = scaler1.transform(hyundai_x)

# 1.3 train_test_split
samsung_x_train, samsung_x_test, samsung_y_train, samsung_y_test = train_test_split(
    samsung_x, samsung_y, train_size=0.8, shuffle=True, random_state=66)

hyundai_x_train, hyundai_x_test, hyundai_y_train, hyundai_y_test = train_test_split(
    hyundai_x, hyundai_y, train_size=0.8, shuffle=True, random_state=66)

# 2. model
input1 = Input(shape=(14,))
dense1 = Dense(100, activation='relu')(input1)
dense1 = Dense(100, activation='relu')(dense1)
dense1 = Dense(50, activation='relu')(dense1)
dense1 = Dense(50, activation='relu')(dense1)
dense1 = Dense(30, activation='relu')(dense1)

input2 = Input(shape=(14,))
dense2 = Dense(100, activation='relu')(input2)
dense2 = Dense(100, activation='relu')(dense2)
dense2 = Dense(50, activation='relu')(dense2)
dense2 = Dense(50, activation='relu')(dense2)
dense2 = Dense(30, activation='relu')(dense2)

merge1 = concatenate([dense1, dense2])
middle1 = Dense(100)(merge1)
middle1 = Dense(100)(middle1)
middle1 = Dense(80)(middle1)

output1 = Dense(60)(middle1)
output1 = Dense(30)(output1)
output1 = Dense(10)(output1)
output1 = Dense(1)(output1)

model = Model(inputs=[input1, input2], outputs=output1)

# 3. compile, train
es = EarlyStopping(monitor='val_loss', patience=10, mode='min', verbose=1)
model.compile(loss='mse', optimizer='adam', metrics='mae')
model.fit([samsung_x_train, hyundai_x_train], samsung_y_train, epochs=200, batch_size=8, verbose=2, validation_split=0.2, callbacks=[es])

# 4. evaluate, predict
result = model.evaluate([samsung_x_test, hyundai_x_test], samsung_y_test, batch_size=8)
print("result : ", result)

y_predict = model.predict([samsung_x_test, hyundai_x_test])
r2 = r2_score(samsung_y_test, y_predict)
rmse = mean_squared_error(samsung_y_test, y_predict, squared=False)

print("R2 score : ", r2)
print("RMSE : ", rmse)